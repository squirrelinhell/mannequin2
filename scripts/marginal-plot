#!/usr/bin/env python3

import sys
import numpy as np

def print_help():
    sys.stdout.write("\n"
        + "Plot numerical data from a tab-separated text file.\n\n"
        + "Usage:\n\tmarginal-plot <input file>\n"
        + "\tmarginal-plot <input file> [ <column1> <column2> ]\n\n")

def auto_type(array):
    try:
        return np.asarray(array, dtype=np.int64)
    except:
        pass

    try:
        return np.asarray(array, dtype=np.float32)
    except:
        pass

    return np.asarray(array, dtype=str)

def read_file(input_file):
    args = {}
    with open(input_file, "r") as f:
        if f.buffer.read(1) == b'#':
            args["names"] = True

    data = np.genfromtxt(input_file, dtype=object, **args)

    if data.dtype.fields == None:
        if len(data.shape) <= 1:
            return {"$1": auto_type(data)}, len(data)
        else:
            return {
                "$" + str(i+1): auto_type(data[:,i])
                for i in range(min(data.shape[-1], 10))
            }, len(data[:,0])
    else:
        out = {}
        for i, name in enumerate(data.dtype.names):
            value = auto_type(data[name])
            out[name] = value
            if i < 10:
                out["$" + str(i+1)] = value
        return out, len(data[data.dtype.names[0]])

def hamming_window(n):
    w = 0.53836 - 0.46164 * np.cos(np.linspace(0.0, 2.0 * np.pi, n))
    return w / np.sum(w)

def running_mean(data, window):
    return np.array([
        np.convolve(d, hamming_window(window), mode="valid")
        for d in data
    ])

def add_plot(ax, xs, ys, mean=False, **kwargs):
    xy = np.array(list(sorted(zip(xs, ys))), dtype=np.float32).T
    if xy.shape[1] < 1:
        return
    if mean:
        color = None
        if xy.shape[1] >= 20:
            p = ax.plot(*xy, ".", markersize=10, alpha=0.2, zorder=1)
            color = p[0].get_color()
            xy = running_mean(xy, xy.shape[1] // 10)
        ax.plot(*xy, "w-", linewidth=4, zorder=2)
        ax.plot(*xy, "-", color=color, linewidth=2, zorder=3, **kwargs)
    else:
        ax.plot(*xy, ".", markersize=10, alpha=0.5, zorder=1, **kwargs)

def build_plot(input_file, *columns,
        xmin=None, xmax=None, ymin=None, ymax=None, **opts):
    import matplotlib.pyplot as plt

    data, data_len = read_file(input_file)
    if data_len < 1:
        sys.stderr.write("Error: no data found\n")
        sys.exit(1)
    data["$0"] = np.arange(data_len)

    columns = list(columns)
    if len(columns) < 1:
        columns.append("$1")
    if len(columns) < 2:
        columns.append("$0")

    columns = [(c, c) for c in columns]
    for key in data:
        columns = [
            (n, v.replace(key, '###["' + key + '"]'))
            for n, v in columns
        ]

    for i in range(len(columns)):
        try:
            code = columns[i][1].replace("###", "data")
            if code[:4] == "log(":
                code = code[4:-1]
            v = eval('lambda data: (' + code + ')')(data)
        except:
            sys.stderr.write("Error: invalid data query: '%s'\n" % code)
            sys.exit(1)

        try:
            columns[i] = (
                columns[i][0],
                np.broadcast_to(v, (data_len,))
            )
        except:
            sys.stderr.write("Error: invalid data shape: '%s'\n" % code)
            sys.exit(1)

    ys, xs = [
        [n, np.asarray(v, dtype=np.float32)]
        for n, v in columns[:2]
    ]

    def minmax(vs, def_min, def_max):
        finite = vs[np.isfinite(vs)]
        if def_min is None:
            def_min = np.nanmin(finite)
        if def_max is None:
            def_max = np.nanmax(finite)
        return float(def_min), float(def_max)

    xmin, xmax = minmax(xs[1], xmin, xmax)
    ymin, ymax = minmax(ys[1], ymin, ymax)

    cls_columns = []
    for n, v in columns[2:]:
        v = np.array([str(i) for i in v], dtype=str)
        cls = list(sorted(set(v)))
        cls_columns.append((n, v, cls))

    def format_ax(prop, label, minv, maxv):
        if label[:4] == "log(":
            label = label[4:-1]
            prop("set_%sscale")("log", nonposx="clip", nonposy="clip")
            if maxv > minv and minv > 0.0:
                prop("set_%slim")(*np.power(10.0, [
                    min(0.0, np.floor(np.log10(minv))),
                    max(0.0, np.ceil(np.log10(maxv)))
                ]))
        else:
            if maxv > minv:
                prop("set_%slim")(minv, maxv)

        prop("set_%slabel")("" if label == "$0" else label)

    def render_ax(ax, *, cls_column=None, pick=slice(None)):
        if cls_column is None:
            add_plot(ax, xs[1][pick], ys[1][pick], **opts)
        else:
            for cls in cls_column[2]:
                sub_pick = (cls_column[1][pick] == cls)
                add_plot(
                    ax,
                    xs[1][pick][sub_pick],
                    ys[1][pick][sub_pick],
                    label=" " + str(cls),
                    **opts
                )
            ax.legend(title=cls_column[0], loc="best",
                fancybox=True, framealpha=0.5)
        ax.grid()
        format_ax(lambda prop: getattr(ax, prop % "x"), xs[0], xmin, xmax)
        format_ax(lambda prop: getattr(ax, prop % "y"), ys[0], ymin, ymax)

    fig, axes = plt.subplots(
        nrows=1 if len(cls_columns) < 3 else len(cls_columns[2][2]),
        ncols=1 if len(cls_columns) < 2 else len(cls_columns[1][2]),
        sharex=True,
        sharey=True
    )

    if len(cls_columns) >= 3:
        for ax1, cls1 in zip(axes, cls_columns[2][2]):
            for ax2, cls2 in zip(ax1, cls_columns[1][2]):
                pick = np.logical_and((cls_columns[2][1] == cls1),
                    (cls_columns[1][1] == cls2))
                render_ax(ax2, cls_column=cls_columns[0], pick=pick)
                ax2.set_title(cls1 + " / " + cls2)
    elif len(cls_columns) >= 2:
        for ax, cls in zip(axes, cls_columns[1][2]):
            pick = (cls_columns[1][1] == cls)
            render_ax(ax, cls_column=cls_columns[0], pick=pick)
            ax.set_title(cls)
    elif len(cls_columns) >= 1:
        render_ax(axes, cls_column=cls_columns[0])
    else:
        render_ax(axes)

def run(*args):
    import os

    opts = {}
    while (len(args) >= 1) and (args[0][:2] == "--"):
        if "=" in args[0]:
            k, v = args[0][2:].split("=", 1)
            opts[k] = v
        else:
            opts[args[0][2:]] = True
        args = args[1:]

    if len(args) < 1:
        print_help()
        return

    if "PLOT_FILE" in os.environ and len(os.environ["PLOT_FILE"]) >= 1:
        plot_file = os.environ["PLOT_FILE"]

        import matplotlib
        matplotlib.use('Agg')

        build_plot(*args, **opts)

        import matplotlib.pyplot as plt
        plt.gcf().set_size_inches(12, 8)
        plt.gcf().savefig(plot_file, dpi=100)
    else:
        build_plot(*args, **opts)

        import matplotlib.pyplot as plt
        plt.show()

def parse_args():
    if len(sys.argv) >= 2:
        run(*sys.argv[1:])
    else:
        print_help()

if __name__ == "__main__":
    parse_args()
